- hosts: localhost
  become: true
  connection: local
  tasks:
    - name: Create security group
      become: true
      become_user: root
      ec2_group:
        name: koko-sre-assessment
        description: koko-sre-assessment
        region: us-east-1
        # define an inbound rule to expose port 5000
        rules:
          - proto: tcp
            from_port: 5000
            to_port: 5000
            cidr_ip: 0.0.0.0/0
          # Docker port
          - proto: tcp
            from_port: 2375
            to_port: 2375
            cidr_ip: 0.0.0.0/0
    - name: launch ec2 instance 
      become: true
      become_user: root
      ec2: 
        instance_type: t2.micro
        key_name: jenkins-server
        image: ami-053b0d53c279acc90
        region: us-east-1
        group: default
        count: 1
        vpc_subnet_id: subnet-0565633e9a42bd845
        wait: yes
        assign_public_ip: yes
    - name: Install aptitude
      hosts: "{{ ec2_instance.instances[0].public_ip }}"
      become: true
      become_user: root
      apt:
        name: aptitude
        state: latest
    - name: Install required system packages
      hosts: "{{ ec2_instance.instances[0].public_ip }}"
      become: true
      become_user: root
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
    - name: Add Docker GPG apt Key
      hosts: "{{ ec2_instance.instances[0].public_ip }}"
      become: true
      become_user: root
      apt_key:
        url: 'https://download.docker.com/linux/ubuntu/gpg'
        state: present
    - name: Add Docker Repository
      hosts: "{{ ec2_instance.instances[0].public_ip }}"
      become: true
      become_user: root
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
    - name: Install Docker
      hosts: "{{ ec2_instance.instances[0].public_ip }}"
      apt:
        name: docker.io
        state: present
    - name: Add user to the docker group
      hosts: "{{ ec2_instance.instances[0].public_ip }}"
      user:
        name: root
        groups: docker
        append: yes
    - name: Restart Docker service
      hosts: "{{ ec2_instance.instances[0].public_ip }}"
      service:
        name: docker
        state: restarted
    - name : Log in to Docker Hub 
      hosts: "{{ ec2_instance.instances[0].public_ip }}"
      become: true
      become_user: root
      docker_login :
        username : <dockerhub-username>
        password : <dockerhub-access-token>
    - name : Pull image from Docker Hub 
      hosts: "{{ ec2_instance.instances[0].public_ip }}"
      become: true
      become_user: root
      docker_image :
        name : melvinkimathi/koko-sre-assessment:v1.1.1
        source: pull
    - name : Start up a Docker container using the pulled image and expose port 5000 
      hosts: "{{ ec2_instance.instances[0].public_ip }}"
      docker_container :
        name : koko-sre-assessment 
        image : melvinkimathi/koko-sre-assessment:v1.1.1 
        state : started 
        ports :
          - "5000:5000"
    
